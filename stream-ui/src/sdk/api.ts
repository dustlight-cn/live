/* tslint:disable */
/* eslint-disable */
/**
 * Stream Service
 * 直播服务接口
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface QueryResultStar
 */
export interface QueryResultStar {
    /**
     * 
     * @type {number}
     * @memberof QueryResultStar
     */
    count?: number;
    /**
     * 
     * @type {Array<Star>}
     * @memberof QueryResultStar
     */
    data?: Array<Star>;
}
/**
 * 
 * @export
 * @interface QueryResultStreamRoom
 */
export interface QueryResultStreamRoom {
    /**
     * 
     * @type {number}
     * @memberof QueryResultStreamRoom
     */
    count?: number;
    /**
     * 
     * @type {Array<StreamRoom>}
     * @memberof QueryResultStreamRoom
     */
    data?: Array<StreamRoom>;
}
/**
 * 
 * @export
 * @interface Star
 */
export interface Star {
    /**
     * 
     * @type {number}
     * @memberof Star
     */
    uid?: number;
    /**
     * 
     * @type {number}
     * @memberof Star
     */
    roomId?: number;
    /**
     * 
     * @type {string}
     * @memberof Star
     */
    date?: string;
}
/**
 * 
 * @export
 * @interface StreamRoom
 */
export interface StreamRoom {
    /**
     * 
     * @type {number}
     * @memberof StreamRoom
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof StreamRoom
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamRoom
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamRoom
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamRoom
     */
    updatedAt?: string;
    /**
     * 
     * @type {User}
     * @memberof StreamRoom
     */
    owner?: User;
    /**
     * 
     * @type {number}
     * @memberof StreamRoom
     */
    stars?: number;
    /**
     * 
     * @type {boolean}
     * @memberof StreamRoom
     */
    streaming?: boolean;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    uid?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    nickname?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface Users
 */
export interface Users {
    /**
     * 
     * @type {number}
     * @memberof Users
     */
    count?: number;
    /**
     * 
     * @type {Array<User>}
     * @memberof Users
     */
    data?: Array<User>;
}

/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 用于 RTMP 推流校验，或者断开推流通知。
         * @summary RTMP 回调
         * @param {string} app 
         * @param {string} name 
         * @param {string} call 
         * @param {string} [token] 
         * @param {string} [flashver] 
         * @param {string} [swfurl] 
         * @param {string} [tcurl] 
         * @param {string} [pageurl] 
         * @param {string} [addr] 
         * @param {string} [clientid] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onRtmpEvent: async (app: string, name: string, call: string, token?: string, flashver?: string, swfurl?: string, tcurl?: string, pageurl?: string, addr?: string, clientid?: string, type?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'app' is not null or undefined
            assertParamExists('onRtmpEvent', 'app', app)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('onRtmpEvent', 'name', name)
            // verify required parameter 'call' is not null or undefined
            assertParamExists('onRtmpEvent', 'call', call)
            const localVarPath = `/v1/event/rtmp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (app !== undefined) { 
                localVarFormParams.set('app', app as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (call !== undefined) { 
                localVarFormParams.set('call', call as any);
            }
    
            if (token !== undefined) { 
                localVarFormParams.set('token', token as any);
            }
    
            if (flashver !== undefined) { 
                localVarFormParams.set('flashver', flashver as any);
            }
    
            if (swfurl !== undefined) { 
                localVarFormParams.set('swfurl', swfurl as any);
            }
    
            if (tcurl !== undefined) { 
                localVarFormParams.set('tcurl', tcurl as any);
            }
    
            if (pageurl !== undefined) { 
                localVarFormParams.set('pageurl', pageurl as any);
            }
    
            if (addr !== undefined) { 
                localVarFormParams.set('addr', addr as any);
            }
    
            if (clientid !== undefined) { 
                localVarFormParams.set('clientid', clientid as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.set('type', type as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 用于 RTMP 推流校验，或者断开推流通知。
         * @summary RTMP 回调
         * @param {string} app 
         * @param {string} name 
         * @param {string} call 
         * @param {string} [token] 
         * @param {string} [flashver] 
         * @param {string} [swfurl] 
         * @param {string} [tcurl] 
         * @param {string} [pageurl] 
         * @param {string} [addr] 
         * @param {string} [clientid] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async onRtmpEvent(app: string, name: string, call: string, token?: string, flashver?: string, swfurl?: string, tcurl?: string, pageurl?: string, addr?: string, clientid?: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.onRtmpEvent(app, name, call, token, flashver, swfurl, tcurl, pageurl, addr, clientid, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * 用于 RTMP 推流校验，或者断开推流通知。
         * @summary RTMP 回调
         * @param {string} app 
         * @param {string} name 
         * @param {string} call 
         * @param {string} [token] 
         * @param {string} [flashver] 
         * @param {string} [swfurl] 
         * @param {string} [tcurl] 
         * @param {string} [pageurl] 
         * @param {string} [addr] 
         * @param {string} [clientid] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onRtmpEvent(app: string, name: string, call: string, token?: string, flashver?: string, swfurl?: string, tcurl?: string, pageurl?: string, addr?: string, clientid?: string, type?: string, options?: any): AxiosPromise<void> {
            return localVarFp.onRtmpEvent(app, name, call, token, flashver, swfurl, tcurl, pageurl, addr, clientid, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * 用于 RTMP 推流校验，或者断开推流通知。
     * @summary RTMP 回调
     * @param {string} app 
     * @param {string} name 
     * @param {string} call 
     * @param {string} [token] 
     * @param {string} [flashver] 
     * @param {string} [swfurl] 
     * @param {string} [tcurl] 
     * @param {string} [pageurl] 
     * @param {string} [addr] 
     * @param {string} [clientid] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public onRtmpEvent(app: string, name: string, call: string, token?: string, flashver?: string, swfurl?: string, tcurl?: string, pageurl?: string, addr?: string, clientid?: string, type?: string, options?: any) {
        return EventsApiFp(this.configuration).onRtmpEvent(app, name, call, token, flashver, swfurl, tcurl, pageurl, addr, clientid, type, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoomsApi - axios parameter creator
 * @export
 */
export const RoomsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoom: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRoom', 'id', id)
            const localVarPath = `/v1/rooms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [id] 
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRooms: async (id?: Array<number>, q?: string, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {StreamRoom} streamRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoom: async (id: number, streamRoom: StreamRoom, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRoom', 'id', id)
            // verify required parameter 'streamRoom' is not null or undefined
            assertParamExists('updateRoom', 'streamRoom', streamRoom)
            const localVarPath = `/v1/rooms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(streamRoom, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomsApi - functional programming interface
 * @export
 */
export const RoomsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoom(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoom(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<number>} [id] 
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRooms(id?: Array<number>, q?: string, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultStreamRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRooms(id, q, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {StreamRoom} streamRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoom(id: number, streamRoom: StreamRoom, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoom(id, streamRoom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoomsApi - factory interface
 * @export
 */
export const RoomsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoom(id: number, options?: any): AxiosPromise<StreamRoom> {
            return localVarFp.getRoom(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [id] 
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRooms(id?: Array<number>, q?: string, offset?: number, limit?: number, options?: any): AxiosPromise<QueryResultStreamRoom> {
            return localVarFp.getRooms(id, q, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {StreamRoom} streamRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoom(id: number, streamRoom: StreamRoom, options?: any): AxiosPromise<void> {
            return localVarFp.updateRoom(id, streamRoom, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoomsApi - object-oriented interface
 * @export
 * @class RoomsApi
 * @extends {BaseAPI}
 */
export class RoomsApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public getRoom(id: number, options?: any) {
        return RoomsApiFp(this.configuration).getRoom(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [id] 
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public getRooms(id?: Array<number>, q?: string, offset?: number, limit?: number, options?: any) {
        return RoomsApiFp(this.configuration).getRooms(id, q, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {StreamRoom} streamRoom 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public updateRoom(id: number, streamRoom: StreamRoom, options?: any) {
        return RoomsApiFp(this.configuration).updateRoom(id, streamRoom, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StarsApi - axios parameter creator
 * @export
 */
export const StarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countRoomStars: async (rid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rid' is not null or undefined
            assertParamExists('countRoomStars', 'rid', rid)
            const localVarPath = `/v1/rooms/{rid}/stars-count`
                .replace(`{${"rid"}}`, encodeURIComponent(String(rid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countUserStars: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/stars-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStar: async (rid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rid' is not null or undefined
            assertParamExists('createStar', 'rid', rid)
            const localVarPath = `/v1/user/star`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)

            if (rid !== undefined) {
                localVarQueryParameter['rid'] = rid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStar: async (rid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rid' is not null or undefined
            assertParamExists('deleteStar', 'rid', rid)
            const localVarPath = `/v1/user/star`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)

            if (rid !== undefined) {
                localVarQueryParameter['rid'] = rid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} rid 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomStars: async (rid: number, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rid' is not null or undefined
            assertParamExists('getRoomStars', 'rid', rid)
            const localVarPath = `/v1/rooms/{rid}/stars`
                .replace(`{${"rid"}}`, encodeURIComponent(String(rid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStar: async (rid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rid' is not null or undefined
            assertParamExists('getStar', 'rid', rid)
            const localVarPath = `/v1/user/star`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)

            if (rid !== undefined) {
                localVarQueryParameter['rid'] = rid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStars: async (offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users/stars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StarsApi - functional programming interface
 * @export
 */
export const StarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StarsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countRoomStars(rid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countRoomStars(rid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countUserStars(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countUserStars(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStar(rid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStar(rid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStar(rid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStar(rid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} rid 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoomStars(rid: number, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultStar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoomStars(rid, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStar(rid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Star>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStar(rid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserStars(offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultStar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserStars(offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StarsApi - factory interface
 * @export
 */
export const StarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StarsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countRoomStars(rid: number, options?: any): AxiosPromise<number> {
            return localVarFp.countRoomStars(rid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countUserStars(options?: any): AxiosPromise<number> {
            return localVarFp.countUserStars(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStar(rid: number, options?: any): AxiosPromise<void> {
            return localVarFp.createStar(rid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStar(rid: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteStar(rid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} rid 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomStars(rid: number, offset?: number, limit?: number, options?: any): AxiosPromise<QueryResultStar> {
            return localVarFp.getRoomStars(rid, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStar(rid: number, options?: any): AxiosPromise<Star> {
            return localVarFp.getStar(rid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStars(offset?: number, limit?: number, options?: any): AxiosPromise<QueryResultStar> {
            return localVarFp.getUserStars(offset, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StarsApi - object-oriented interface
 * @export
 * @class StarsApi
 * @extends {BaseAPI}
 */
export class StarsApi extends BaseAPI {
    /**
     * 
     * @param {number} rid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarsApi
     */
    public countRoomStars(rid: number, options?: any) {
        return StarsApiFp(this.configuration).countRoomStars(rid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarsApi
     */
    public countUserStars(options?: any) {
        return StarsApiFp(this.configuration).countUserStars(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} rid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarsApi
     */
    public createStar(rid: number, options?: any) {
        return StarsApiFp(this.configuration).createStar(rid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} rid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarsApi
     */
    public deleteStar(rid: number, options?: any) {
        return StarsApiFp(this.configuration).deleteStar(rid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} rid 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarsApi
     */
    public getRoomStars(rid: number, offset?: number, limit?: number, options?: any) {
        return StarsApiFp(this.configuration).getRoomStars(rid, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} rid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarsApi
     */
    public getStar(rid: number, options?: any) {
        return StarsApiFp(this.configuration).getStar(rid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarsApi
     */
    public getUserStars(offset?: number, limit?: number, options?: any) {
        return StarsApiFp(this.configuration).getUserStars(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取当前用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (uid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUser', 'uid', uid)
            const localVarPath = `/v1/users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取多个用户信息
         * @param {Array<number>} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (uid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUsers', 'uid', uid)
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uid) {
                localVarQueryParameter['uid'] = uid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 获取当前用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取多个用户信息
         * @param {Array<number>} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(uid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary 获取当前用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): AxiosPromise<User> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(uid: number, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取多个用户信息
         * @param {Array<number>} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(uid: Array<number>, options?: any): AxiosPromise<Users> {
            return localVarFp.getUsers(uid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary 获取当前用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getCurrentUser(options?: any) {
        return UsersApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户信息
     * @param {number} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(uid: number, options?: any) {
        return UsersApiFp(this.configuration).getUser(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取多个用户信息
     * @param {Array<number>} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(uid: Array<number>, options?: any) {
        return UsersApiFp(this.configuration).getUsers(uid, options).then((request) => request(this.axios, this.basePath));
    }
}


